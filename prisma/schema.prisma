// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

enum UserRole {
  USER
  MODERATOR
  ADMIN
}

enum OperatorType {
  KOLBI
  MOVISTAR
  CLARO
  LIBERTY
}

enum ComparisonOperator {
  GREATER_THAN
  LESS_THAN
  GREATER_THAN_EQUAL
  LESS_THAN_EQUAL
  EQUAL
}

enum NotificationType {
  STREAK_REMINDER
  ACHIEVEMENT
  STREAK_MILESTONE
  SOCIAL
  SYSTEM
  DIGEST
}

enum NotificationPriority {
  LOW
  MEDIUM
  HIGH
}

model User {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  name              String?
  email             String    @unique
  hashedPassword    String?
  verificationToken String?   @db.ObjectId
  emailVerified     DateTime?
  image             String?
  role              UserRole  @default(USER)
  preferredLanguage String    @default("en")
  points            Int       @default(0)
  level             Int       @default(1)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  wifiSpots         WifiSpot[]
  coverageReports   CoverageReport[]
  achievements      Achievement[]
  streaks           UserStreak[]
  progress          UserProgress?
  stats             UserStats?
  measurements      Measurement[]
  leaderboardEntries LeaderboardEntry[]
  notifications     Notification[]
  notificationPreferences NotificationPreferences?

  @@index([verificationToken])
}

model UserStreak {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  current     Int      @default(0)
  longest     Int      @default(0)
  lastCheckin DateTime @default(now())

  @@index([userId])
}

model WifiSpot {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  latitude    Float
  longitude   Float
  speed       Float?
  signal      Int?
  security    String?
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  verified    Boolean  @default(false)
  verifiedBy  String?  @db.ObjectId
  points      Int      @default(10)
}

model CoverageReport {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String
  points      Int      @default(0)
  metadata    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Achievement {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  points      Int
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  unlockedAt  DateTime?
  type        String   // e.g., "wifi_spots", "coverage_reports", "streak"
  threshold   Int      // number required to unlock
  icon        String?  // path to achievement icon
}

model UserProgress {
  id          String      @id @default(cuid()) @map("_id")
  userId      String      
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  level       Int         @default(1)
  currentXP   Int         @default(0)
  totalXP     Int         @default(0)
  streak      Int         @default(0)
  maxStreak   Int         @default(0)
  lastCheckin DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@unique([userId])
}

model UserStats {
  id                String   @id @default(cuid()) @map("_id")
  userId           String      
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  totalMeasurements Int      @default(0)
  ruralMeasurements Int      @default(0)
  uniqueLocations   Int      @default(0)
  totalDistance     Float    @default(0)
  contributionScore Float    @default(0)
  qualityScore      Float    @default(0)
  accuracyRate      Float    @default(0)
  verifiedSpots     Int      @default(0)
  helpfulActions    Int      @default(0)
  consecutiveDays   Int      @default(0)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@unique([userId])
}

model LeaderboardEntry {
  id          String   @id @default(cuid()) @map("_id")
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  rank        Int
  points      Int      @default(0)
  timeframe   String   // daily, weekly, monthly, allTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, timeframe])
  @@index([timeframe, rank])
}

model Measurement {
  id          String    @id @default(cuid()) @map("_id")
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  type        String    // wifi or coverage
  value       Float
  latitude    Float
  longitude   Float
  accuracy    Float?
  altitude    Float?
  speed      Float?
  timestamp   DateTime  @default(now())
  deviceInfo  Json?
  metadata    Json?
  isVerified  Boolean   @default(false)
  points      Int       @default(0)
  isRural     Boolean   @default(false)
  distance    Float?    // Distance from previous measurement in meters

  // WiFi specific fields
  ssid        String?
  bssid       String?
  frequency   Float?
  channel     Int?
  security    String?
  
  // Coverage specific fields
  operator    String?
  networkType String?
  signalStrength Int?
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([userId])
  @@index([type])
  @@index([latitude, longitude])
  @@index([timestamp])
}

model Notification {
  id            String              @id @default(auto()) @map("_id") @db.ObjectId
  userId        String
  type          NotificationType
  title         String
  message       String
  isRead        Boolean             @default(false)
  priority      NotificationPriority @default(MEDIUM)
  style         Json?               // For custom styling like colors, icons
  metadata      Json?               // For additional notification-specific data
  scheduledFor  DateTime?
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  user          User                @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([type])
  @@index([createdAt])
}

model NotificationPreferences {
  id                  String    @id @default(auto()) @map("_id") @db.ObjectId
  userId              String
  email               Boolean   @default(true)
  push                Boolean   @default(true)
  inApp               Boolean   @default(true)
  dailyDigest         Boolean   @default(true)
  streakReminders     Boolean   @default(true)
  achievementAlerts   Boolean   @default(true)
  socialNotifications Boolean   @default(true)
  quietHoursStart     String?
  quietHoursEnd       String?
  user                User      @relation(fields: [userId], references: [id])
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  @@unique([userId])
}
