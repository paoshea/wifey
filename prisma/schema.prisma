generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  hashedPassword String?
  role          String    @default("user")
  accounts      Account[]
  sessions      Session[]
  notifications Notification[]
  notificationPreference NotificationPreference?
  stats         UserStats?
  achievements  UserAchievement[]
  streaks      UserStreak[]
  contributions Contribution[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

type WifiHotspotLocation {
  coordinates Float[]
  type        String
}

model Achievement {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  icon        String
  type        String
  threshold   Int
  points      Int
  createdAt   DateTime @default(now())
  userAchievements UserAchievement[]
}

model CoverageComparison {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  timestamp Json?

  @@index([timestamp])
}

model CoverageHistory {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  timestamp Json?

  @@index([timestamp])
}

model CoveragePoint {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  location Json?
  provider Json?
  type     Json?

  @@unique([provider, type, location])
  @@index([provider])
  @@index([type])
}

model CoverageReport {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @db.Date
  latitude  Float
  longitude Float
  operator  String
  points    BigInt
  signal    BigInt
  speed     Float
  updatedAt DateTime @db.Date
  userId    String   @db.ObjectId
  verified  Boolean
}

model Contribution {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  type      String   // e.g., 'coverage', 'wifi', 'verification'
  points    Int
  metadata  Json?    // Additional contribution data
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([type, createdAt])
}

model ErrorLog {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  timestamp Json?
  userId    Json?

  @@index([userId])
  @@index([timestamp])
}

model LeaderboardEntry {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  points    Json?
  timeframe Json?

  @@index([timeframe, points])
}

model Measurement {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  latitude  Float
  longitude Float
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([latitude, longitude])
  @@index([createdAt])
}

model Notification {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  type        String
  title       String
  message     String
  isRead      Boolean  @default(false)
  priority    String   @default("MEDIUM")
  style       Json?
  metadata    Json?
  scheduledFor DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model NotificationPreference {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  userId             String   @db.ObjectId @unique
  email              Boolean  @default(true)
  push               Boolean  @default(true)
  inApp              Boolean  @default(true)
  dailyDigest        Boolean  @default(false)
  streakReminders    Boolean  @default(true)
  achievementAlerts  Boolean  @default(true)
  socialNotifications Boolean  @default(true)
  quietHoursStart    String?
  quietHoursEnd      String?
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PerformanceLog {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  operation Json?
  timestamp Json?
  userId    Json?

  @@index([userId])
  @@index([operation])
  @@index([timestamp])
}

model RankHistory {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  date      Json?
  timeframe Json?
  userId    Json?

  @@index([userId])
  @@index([timeframe, date])
}

model UserAchievement {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  userId        String   @db.ObjectId
  achievementId String   @db.ObjectId
  unlockedAt    DateTime @default(now())
  progress      Int      @default(0)
  
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
  @@index([userId, unlockedAt])
}

model UserStats {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @unique @db.ObjectId
  points    Int      @default(0)
  level     Int      @default(1)
  xp        Int      @default(0)
  stats     Json     // Stores StatsContent
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserStreak {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  current   Int      @default(0)
  longest   Int      @default(0)
  lastContribution DateTime?
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model WifiHotspot {
  id           String              @id @default(auto()) @map("_id") @db.ObjectId
  isPublic     Boolean
  lastVerified DateTime            @db.Date
  location     WifiHotspotLocation
  name         String
  provider     String
  speed        String

  @@index([provider])
  @@index([isPublic])
}

model WifiSpot {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @db.Date
  latitude  Float
  longitude Float
  name      String
  points    BigInt
  security  String
  signal    BigInt
  speed     Float
  updatedAt DateTime @db.Date
  userId    String   @db.ObjectId
  verified  Boolean
}
