// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

enum UserRole {
  USER
  MODERATOR
  ADMIN
}

enum OperatorType {
  KOLBI
  MOVISTAR
  CLARO
  LIBERTY
}

enum ComparisonOperator {
  GREATER_THAN
  LESS_THAN
  GREATER_THAN_EQUAL
  LESS_THAN_EQUAL
  EQUAL
}

model User {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  name              String?
  email             String    @unique
  hashedPassword    String?
  verificationToken String?
  emailVerified     DateTime?
  image             String?
  role              UserRole  @default(USER)
  preferredLanguage String    @default("en")
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  wifiSpots         WifiSpot[]
  coverageReports   CoverageReport[]
  achievements      Achievement[]
  points            Int       @default(0)
  streaks           UserStreak[]

  @@index([verificationToken])
}

model UserStreak {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  current     Int      @default(0)
  longest     Int      @default(0)
  lastCheckin DateTime @default(now())

  @@index([userId])
}

model WifiSpot {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  latitude    Float
  longitude   Float
  speed       Float?
  signal      Int?
  security    String?
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  verified    Boolean  @default(false)
  verifiedBy  String?  @db.ObjectId
  points      Int      @default(10)
}

model CoverageReport {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  operator    OperatorType
  latitude    Float
  longitude   Float
  signal      Int
  speed       Float?
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  verified    Boolean  @default(false)
  verifiedBy  String?  @db.ObjectId
  points      Int      @default(5)
}

model Achievement {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  points      Int
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  unlockedAt  DateTime?
  type        String   // e.g., "wifi_spots", "coverage_reports", "streak"
  threshold   Int      // number required to unlock
  icon        String?  // path to achievement icon
}
