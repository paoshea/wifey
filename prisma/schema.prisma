generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  email         String         @unique
  name          String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  contributions CoveragePoint[]
  measurements  Measurement[]
  progress      UserProgress?
  leaderboard   LeaderboardEntry[]
}

model CoveragePoint {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  location       Json      // { lat: number, lng: number }
  signalStrength Float
  provider       String
  type           String    // 'cellular' or 'wifi'
  technology     String    // '2G', '3G', '4G', '5G'
  reliability    Float
  timestamp      DateTime  @default(now())
  userId         String?   @db.ObjectId
  user           User?     @relation(fields: [userId], references: [id])
  history        CoverageHistory[]
  verifications  Int       @default(0)
  lastVerified   DateTime  @default(now())
  predictedArea  Json?     // Polygon of predicted coverage area
  metadata       Json?     // Additional metadata for coverage point
}

model CoverageHistory {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  coveragePointId String        @db.ObjectId
  coveragePoint   CoveragePoint @relation(fields: [coveragePointId], references: [id])
  signalStrength  Float
  timestamp       DateTime      @default(now())
  userId          String?       @db.ObjectId
  metadata        Json?         // Weather conditions, time of day, etc.
}

model WifiHotspot {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  location     Json
  provider     String
  speed        String?
  isPublic     Boolean  @default(true)
  lastVerified DateTime @default(now())
}

model Measurement {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  type      String   // 'speed', 'signal', or 'latency'
  value     Float
  unit      String
  location  Json
  timestamp DateTime @default(now())
  device    Json
  user      User     @relation(fields: [userId], references: [id])
}

model CoverageComparison {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  location    Json     // { lat: number, lng: number }
  providers   Json[]   // Array of provider comparisons
  timestamp   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Gamification Models
model UserProgress {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  userId          String    @unique @db.ObjectId
  user            User      @relation(fields: [userId], references: [id])
  totalPoints     Int       @default(0)
  level           Int       @default(1)
  currentExp      Int       @default(0)
  nextLevelExp    Int       @default(100)
  achievements    UserAchievement[]
  stats          UserStats?
  streaks        UserStreak?
  badges         UserBadge[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model UserStats {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  userProgressId    String    @unique @db.ObjectId
  userProgress      UserProgress @relation(fields: [userProgressId], references: [id])
  totalMeasurements Int       @default(0)
  ruralMeasurements Int       @default(0)
  verifiedSpots     Int       @default(0)
  helpfulActions    Int       @default(0)
  consecutiveDays   Int       @default(0)
  lastMeasurementDate DateTime?
  qualityScore     Float     @default(0)
  accuracyRate     Float     @default(0)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model Achievement {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  category    String
  title       String    @unique
  description String
  points      Int
  icon        String
  tier        String    // BRONZE, SILVER, GOLD, PLATINUM
  requirements Json     // Stored requirements criteria
  isSecret    Boolean   @default(false)
  userAchievements UserAchievement[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([category])
  @@index([tier])
}

model UserAchievement {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  userProgress  UserProgress @relation(fields: [userProgressId], references: [id])
  userProgressId String   @db.ObjectId
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  achievementId String    @db.ObjectId
  progress      Int       @default(0)
  completed     Boolean   @default(false)
  completedAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([userProgressId, achievementId])
  @@index([userProgressId])
  @@index([achievementId])
}

model UserStreak {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  userProgress  UserProgress @relation(fields: [userProgressId], references: [id])
  userProgressId String   @unique @db.ObjectId
  currentStreak Int       @default(0)
  lastUpdated   DateTime  @default(now())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model UserBadge {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  userProgress  UserProgress @relation(fields: [userProgressId], references: [id])
  userProgressId String   @db.ObjectId
  badgeType     String
  level         Int       @default(1)
  progress      Int       @default(0)
  unlockedAt    DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([userProgressId, badgeType])
  @@index([userProgressId])
  @@index([badgeType])
}

model LeaderboardEntry {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  userId      String    @db.ObjectId
  user        User      @relation(fields: [userId], references: [id])
  points      Int       @default(0)
  rank        Int
  timeframe   String    // daily, weekly, monthly, allTime
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([userId, timeframe])
  @@index([userId])
  @@index([timeframe])
  @@index([points])
}
