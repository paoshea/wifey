generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

enum UserRole {
  USER
  MODERATOR
  ADMIN
}

enum OperatorType {
  KOLBI
  MOVISTAR
  CLARO
  LIBERTY
}

enum MeasurementType {
  WIFI
  COVERAGE
}

enum TimeFrame {
  DAILY
  WEEKLY
  MONTHLY
  ALL_TIME
}

model User {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  name              String?
  email             String    @unique
  hashedPassword    String?
  verificationToken String?   @db.ObjectId
  emailVerified     DateTime?
  image             String?
  role              UserRole  @default(USER)
  preferredLanguage String    @default("en")
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  measurements      Measurement[]
  userStats        UserStats?
  streakHistory    UserStreak[]
  achievements     Achievement[]
  leaderboardEntries LeaderboardEntry[]

  @@index([verificationToken])
}

model Measurement {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  type        MeasurementType
  value       Float
  latitude    Float
  longitude   Float
  isRural     Boolean  @default(false)
  operator    String?
  quality     Float?
  accuracy    Float?
  createdAt   DateTime @default(now())
  
  user        User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([latitude, longitude])
}

model UserStats {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  userId           String   @db.ObjectId @unique
  points           Int      @default(0)
  statsData        Json     // Stores the detailed stats object
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([points])
}

model UserStreak {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  current     Int      @default(0)
  longest     Int      @default(0)
  lastCheckin DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Achievement {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  userId        String   @db.ObjectId
  title         String
  description   String
  points        Int
  icon          String?
  type          String   @default("achievement")
  tier          String   @default("COMMON")
  requirements  Json     // Stores achievement requirements as array
  progress      Int      @default(0)
  unlockedAt    DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  user          User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([type, tier])
}

model LeaderboardEntry {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  userId      String    @db.ObjectId
  timeframe   TimeFrame
  points      Int       @default(0)
  rank        Int
  stats       Json      // Stores leaderboard-specific stats
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  user        User      @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([timeframe, points])
  @@index([timeframe, rank])
}

model CoverageReport {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  latitude    Float
  longitude   Float
  signal      Float
  speed       Float?
  createdAt   DateTime @default(now())

  @@index([latitude, longitude])
}